<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEAAAAAAAD/4QBaRXhpZgAATU0AKgAAAAgAA0AAAAMAAAABAK4AAEABAAEAAAAB
        AAAAAIdpAAQAAAABAAAAMgAAAAAAAkAAAAMAAAABAK4AAEABAAEAAAABAAAAAAAAAAAAAP/bAEMACwkJ
        BwkJBwkJCQkLCQkJCQkJCwkLCwwLCwsMDRAMEQ4NDgwSGRIlGh0lHRkfHCkpFiU3NTYaKjI+LSkwGTsh
        E//bAEMBBwgICwkLFQsLFSwdGR0sLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws
        LCwsLCwsLCwsLP/AABEIASgB2gMBIgACEQEDEQH/xAAfAAABBQEBAQEBAQAAAAAAAAAAAQIDBAUGBwgJ
        Cgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMABBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8CQzYnKC
        CQoWFxgZGiUmJygpKjQ1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoOEhYaHiImK
        kpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4eLj5OXm5+jp6vHy8/T1
        9vf4+fr/xAAfAQADAQEBAQEBAQEBAAAAAAAAAQIDBAUGBwgJCgv/xAC1EQACAQIEBAMEBwUEBAABAncA
        AQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJIzNS8BVictEKFiQ04SXxFxgZGiYnKCkqNTY3ODk6Q0RF
        RkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqCg4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1
        tre4ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T19vf4+fr/2gAMAwEAAhEDEQA/AOKpRmjF
        OAr6s8dsBmnigCnAUGTYCnjNIBTwKZmxRTxmkApRSIF5pwzSAU8CkIBmngGgCngUrjEANOANOApcVI7C
        DNOoxTsUgDmlGaBTgKQw5oyaXFLigYnNKM0uKdgUrgNwadSgflTsUgGc0vNOx0oxQOw3mjmn4o20BYjw
        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
</value>
  </data>
</root>